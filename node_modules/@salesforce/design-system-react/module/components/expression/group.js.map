{"version":3,"sources":["../../../.tmp-es/components/expression/group.jsx"],"names":["React","PropTypes","classNames","assign","shortid","EXPRESSION_GROUP","Combobox","Button","Input","propTypes","assistiveText","shape","label","string","addCondition","addGroup","id","children","node","className","oneOfType","array","object","events","onChangeTrigger","func","onChangeCustomLogicValue","onAddCondition","onAddGroup","focusOnMount","bool","labels","customLogic","takeAction","triggerAll","triggerAlways","triggerAny","triggerCustom","triggerFormula","isRoot","triggerType","oneOf","customLogicValue","defaultProps","ExpressionGroup","props","generatedId","generate","rootNode","input","querySelector","focus","selection","Triggers","getTriggers","t","push","triggerCombobox","onSelect","event","data","triggerChange","getId","getTriggerSelection","buttons","icon","body","trigger","Component","displayName"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Expression Group design pattern](https://lightningdesignsystem.com/components/expression/) in React.\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport assign from 'lodash.assign';\n\n// ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\nimport shortid from 'shortid';\n\nimport { EXPRESSION_GROUP } from '../../utilities/constants';\n\nimport Combobox from '../combobox';\nimport Button from '../button';\nimport Input from '../input';\n\nconst propTypes = {\n\t/**\n\t *  **Assistive text for accessibility.**\n\t * * `label`: For users of assistive technology, assistive text for the expression group's label.\n\t * * `addCondition`: For users of assistive technology, assistive text for the Add Condition button's icon.\n\t * * `addGroup`: For users of assistive technology, assistive text for the Add Group button's icon.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\taddCondition: PropTypes.string,\n\t\taddGroup: PropTypes.string,\n\t}),\n\t/**\n\t * HTML id for ExpressionGroup component.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * `ExpressionGroup` children, accepts `ExpressionCondition`. (Also accepts sub-`ExpressionGroup` if `isRoot`)\n\t */\n\tchildren: PropTypes.node,\n\t/**\n\t * CSS classes to be added to the element with class `.slds-expression__group`. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Callbacks for various expression group events such as trigger change, add condition etc\n\t */\n\tevents: PropTypes.shape({\n\t\tonChangeTrigger: PropTypes.func,\n\t\tonChangeCustomLogicValue: PropTypes.func,\n\t\tonAddCondition: PropTypes.func,\n\t\tonAddGroup: PropTypes.func,\n\t}),\n\t/**\n\t * If set to true, the component will focus on the first focusable input upon mounting. This is useful for accessibility when adding new groups.\n\t */\n\tfocusOnMount: PropTypes.bool,\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `addCondition`: Label for the Add Condition Button. Defaults to \"Add Condition\"\n\t * * `addGroup`: Label for the Add Group Button. Defaults to \"Add Group\"\n\t * * `customLogic`: Label for the text box for inputting `customLogicValue`, if the `triggerType` is `custom`. Defaults to \"Custom Logic\"\n\t * * `label`: Label for the expression group, to indicate condition connectors based on the parent's trigger-type chosen. Defaults to \"\"\n\t * * `takeAction`: Label for the `triggerType` selector. Defaults to \"Take Action When\"\n\t * * `triggerAll`: Label for the `all` value within the trigger selector\n\t * * `triggerAlways`: Label for the `always` value within the trigger selector\n\t * * `triggerAny`: Label for the `any` value within the trigger selector\n\t * * `triggerCustom`: Label for the `custom` value within the trigger selector\n\t * * `triggerFormula`: Label for the `formula` value within the trigger selector\n\t */\n\tlabels: PropTypes.shape({\n\t\taddCondition: PropTypes.string,\n\t\taddGroup: PropTypes.string,\n\t\tcustomLogic: PropTypes.string,\n\t\tlabel: PropTypes.string,\n\t\ttakeAction: PropTypes.string,\n\t\ttriggerAll: PropTypes.string,\n\t\ttriggerAlways: PropTypes.string,\n\t\ttriggerAny: PropTypes.string,\n\t\ttriggerCustom: PropTypes.string,\n\t\ttriggerFormula: PropTypes.string,\n\t}),\n\t/**\n\t * Whether the group is at root level\n\t */\n\tisRoot: PropTypes.bool,\n\t/**\n\t * Trigger type for the Group\n\t */\n\ttriggerType: PropTypes.oneOf(['all', 'any', 'custom', 'always', 'formula']),\n\t/**\n\t * Sets the input for the custom logic value input box, shown if the `triggerType` is set to `custom`.\n\t */\n\tcustomLogicValue: PropTypes.string,\n};\n\nconst defaultProps = {\n\ttriggerType: 'all',\n\tcustomLogicValue: '',\n\tlabels: {\n\t\tlabel: '',\n\t\ttakeAction: 'Take Action When',\n\t\tcustomLogic: 'Custom Logic',\n\t\taddCondition: 'Add Condition',\n\t\taddGroup: 'Add Group',\n\t\ttriggerAll: 'All Conditions Are Met',\n\t\ttriggerAny: 'Any Condition Is Met',\n\t\ttriggerCustom: 'Custom Logic Is Met',\n\t\ttriggerAlways: 'Always (No Criteria)',\n\t\ttriggerFormula: 'Formula Evaluates To True',\n\t},\n};\n\n/**\n * Expression Group Component\n */\nclass ExpressionGroup extends React.Component {\n\t/**\n\t *  Return triggerType selected, processing the triggerType objects generated\n\t */\n\tstatic triggerChange(event, data) {\n\t\tconst selection = data.selection[0].id;\n\t\tlet trigger = '';\n\t\tif (selection === '1') {\n\t\t\ttrigger = 'all';\n\t\t} else if (selection === '2') {\n\t\t\ttrigger = 'any';\n\t\t} else if (selection === '3') {\n\t\t\ttrigger = 'custom';\n\t\t} else if (selection === '4') {\n\t\t\ttrigger = 'always';\n\t\t} else if (selection === '5') {\n\t\t\ttrigger = 'formula';\n\t\t}\n\t\treturn trigger;\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\tcomponentDidMount() {\n\t\tif (this.props.focusOnMount && this.rootNode) {\n\t\t\tconst input = this.rootNode.querySelector('input');\n\t\t\tif (input) {\n\t\t\t\tinput.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the Expression Group's HTML id. Generate a new one if no ID present.\n\t */\n\tgetId() {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\t/**\n\t * Generate and return trigger type objects, with labels either sent as props or using default props.\n\t */\n\tgetTriggers() {\n\t\tconst labels = assign({}, defaultProps.labels, this.props.labels);\n\t\treturn [\n\t\t\t{ id: '1', label: labels.triggerAll },\n\t\t\t{ id: '2', label: labels.triggerAny },\n\t\t\t{ id: '3', label: labels.triggerCustom },\n\t\t\t{ id: '4', label: labels.triggerAlways },\n\t\t\t{ id: '5', label: labels.triggerFormula },\n\t\t];\n\t}\n\n\t/**\n\t *  Returns object of trigger from trigger passed as prop\n\t */\n\tgetTriggerSelection() {\n\t\tconst selection = this.props.triggerType;\n\t\tconst Triggers = this.getTriggers();\n\t\tconst t = [];\n\t\tif (selection === 'all') {\n\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\tt.push(Triggers[0]);\n\t\t} else if (selection === 'any') {\n\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\tt.push(Triggers[1]);\n\t\t} else if (selection === 'custom') {\n\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\tt.push(Triggers[2]);\n\t\t} else if (selection === 'always') {\n\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\tt.push(Triggers[3]);\n\t\t} else if (selection === 'formula') {\n\t\t\t// eslint-disable-next-line fp/no-mutating-methods\n\t\t\tt.push(Triggers[4]);\n\t\t}\n\t\treturn t;\n\t}\n\n\trender() {\n\t\tconst assistiveText = assign(\n\t\t\t{},\n\t\t\tdefaultProps.assistiveText,\n\t\t\tthis.props.assistiveText\n\t\t);\n\t\tconst labels = assign({}, defaultProps.labels, this.props.labels);\n\n\t\tconst triggerCombobox = (\n\t\t\t<Combobox\n\t\t\t\tevents={{\n\t\t\t\t\tonSelect: (event, data) =>\n\t\t\t\t\t\tthis.props.events.onChangeTrigger(event, {\n\t\t\t\t\t\t\ttriggerType: ExpressionGroup.triggerChange(event, data),\n\t\t\t\t\t\t}),\n\t\t\t\t}}\n\t\t\t\tid={`${this.getId()}-take-action-trigger`}\n\t\t\t\tmultiple={false}\n\t\t\t\toptions={this.getTriggers()}\n\t\t\t\tvariant=\"readonly\"\n\t\t\t\tlabels={{ label: labels.takeAction }}\n\t\t\t\tselection={this.getTriggerSelection()}\n\t\t\t/>\n\t\t);\n\n\t\tconst buttons =\n\t\t\tthis.props.triggerType !== 'always' &&\n\t\t\tthis.props.triggerType !== 'formula' ? (\n\t\t\t\t<div className=\"slds-expression__buttons\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\t\ticonName=\"add\"\n\t\t\t\t\t\ticonPosition=\"left\"\n\t\t\t\t\t\tid={`${this.getId()}-add-condition-button`}\n\t\t\t\t\t\tlabel={labels.addCondition}\n\t\t\t\t\t\tassistiveText={{ icon: assistiveText.addCondition }}\n\t\t\t\t\t\tonClick={this.props.events.onAddCondition}\n\t\t\t\t\t/>\n\t\t\t\t\t{this.props.isRoot ? (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\t\t\ticonName=\"add\"\n\t\t\t\t\t\t\ticonPosition=\"left\"\n\t\t\t\t\t\t\tid={`${this.getId()}-add-group-button`}\n\t\t\t\t\t\t\tlabel={labels.addGroup}\n\t\t\t\t\t\t\tassistiveText={{ icon: assistiveText.addGroup }}\n\t\t\t\t\t\t\tonClick={this.props.events.onAddGroup}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t) : null;\n\n\t\tlet body = null;\n\n\t\tif (this.props.triggerType !== 'always') {\n\t\t\tif (this.props.isRoot && this.props.triggerType === 'formula') {\n\t\t\t\tbody = this.props.children;\n\t\t\t} else {\n\t\t\t\tbody = (\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t{this.props.triggerType === 'custom' ? (\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tlabel={labels.customLogic}\n\t\t\t\t\t\t\t\tclassName=\"slds-expression__custom-logic\"\n\t\t\t\t\t\t\t\tid={`${this.getId()}-custom-logic-input`}\n\t\t\t\t\t\t\t\tvalue={this.props.customLogicValue}\n\t\t\t\t\t\t\t\tvariant=\"base\"\n\t\t\t\t\t\t\t\tonChange={this.props.events.onChangeCustomLogicValue}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t<ul>{this.props.children}</ul>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (this.props.isRoot) {\n\t\t\tif (this.props.triggerType === 'formula') {\n\t\t\t\treturn (\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<div className=\"slds-expression__options\">{triggerCombobox}</div>\n\t\t\t\t\t\t{body}\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<div className={classNames(this.props.className)} id={this.getId()}>\n\t\t\t\t\t<div className=\"slds-expression__options\">{triggerCombobox}</div>\n\t\t\t\t\t{body}\n\t\t\t\t\t{buttons}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<li\n\t\t\t\tclassName={classNames('slds-expression__group', this.props.className)}\n\t\t\t\tid={this.getId()}\n\t\t\t\tref={(rootNode) => {\n\t\t\t\t\tthis.rootNode = rootNode;\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend className=\"slds-expression__legend slds-expression__legend_group\">\n\t\t\t\t\t\t<span>{labels.label}</span>\n\t\t\t\t\t\t<span className=\"slds-assistive-text\">{assistiveText.label}</span>\n\t\t\t\t\t</legend>\n\t\t\t\t\t<div className=\"slds-expression__options\">{triggerCombobox}</div>\n\t\t\t\t\t{body}\n\t\t\t\t\t{buttons}\n\t\t\t\t</fieldset>\n\t\t\t</li>\n\t\t);\n\t}\n}\n\nExpressionGroup.displayName = EXPRESSION_GROUP;\nExpressionGroup.propTypes = propTypes;\nExpressionGroup.defaultProps = defaultProps;\n\nexport default ExpressionGroup;\n"],"file":"group.js"}