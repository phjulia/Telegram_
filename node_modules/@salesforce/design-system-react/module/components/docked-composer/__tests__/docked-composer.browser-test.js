function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import chai, { expect } from 'chai';
import chaiEnzyme from 'chai-enzyme';
import { mount } from 'enzyme';
import IconSettings from '../../icon-settings';
import DockedComposer from '../../docked-composer';
chai.use(chaiEnzyme());

var DemoComponent = /*#__PURE__*/function (_React$Component) {
  _inherits(DemoComponent, _React$Component);

  var _super = _createSuper(DemoComponent);

  function DemoComponent() {
    var _this;

    _classCallCheck(this, DemoComponent);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      isOpen: true,
      isClosed: false
    });

    _defineProperty(_assertThisInitialized(_this), "handleMinimize", function () {
      _this.setState({
        isOpen: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleExpand", function () {
      _this.setState({
        isOpen: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleClose", function () {
      _this.setState({
        isClosed: true
      });
    });

    return _this;
  }

  _createClass(DemoComponent, [{
    key: "render",
    value: function render() {
      var component = /*#__PURE__*/React.createElement(IconSettings, {
        iconPath: "/assets/icons"
      }, /*#__PURE__*/React.createElement(DockedComposer, {
        header: "What's New this Release?",
        body: /*#__PURE__*/React.createElement("div", {
          id: "composer-body"
        }, "Hello"),
        id: "docked-composer-demo",
        events: {
          onRequestMinimize: this.handleMinimize,
          onRequestExpand: this.handleExpand,
          onRequestClose: this.handleClose
        },
        isOpen: this.state.isOpen
      }), /*#__PURE__*/React.createElement("div", {
        id: this.state.isOpen ? 'open' : 'collapsed'
      }), /*#__PURE__*/React.createElement("div", {
        id: this.state.isClosed ? 'closed' : 'notClosed'
      }));
      return component;
    }
  }]);

  return DemoComponent;
}(React.Component);

_defineProperty(DemoComponent, "displayName", 'DockedComposerDemoComponent');

describe('SLDSDockedComposer', function describeFunction() {
  var wrapper;
  it('onRequestMinimize, onRequestExpand, onRequestClose callbacks', function () {
    wrapper = mount( /*#__PURE__*/React.createElement(DemoComponent, null)); // Composer should be initially open

    expect(wrapper.find('#open')).to.have.length(1);
    expect(wrapper.find('#closed')).to.have.length(0); // Click the minimize button

    wrapper.find('button#docked-composer-demo-minimize-button').simulate('click');
    expect(wrapper.find('#collapsed')).to.have.length(1);
    expect(wrapper.find('#closed')).to.have.length(0); // Click the expand button now

    wrapper.find('button#docked-composer-demo-expand-button').simulate('click');
    expect(wrapper.find('#open')).to.have.length(1);
    expect(wrapper.find('#closed')).to.have.length(0); // Clicking the close button sets the close state

    wrapper.find('button#docked-composer-demo-close-button').simulate('click');
    expect(wrapper.find('#open')).to.have.length(1);
    expect(wrapper.find('#closed')).to.have.length(1);
  });
});
//# sourceMappingURL=docked-composer.browser-test.js.map