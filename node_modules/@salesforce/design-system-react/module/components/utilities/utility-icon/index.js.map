{"version":3,"sources":["../../../../.tmp-es/components/utilities/utility-icon/index.jsx"],"names":["React","useContext","PropTypes","checkProps","Svg","SLDS_ICONS_UTILITY","SLDS_ICONS_ACTION","SLDS_ICONS_CUSTOM","SLDS_ICONS_DOCTYPE","SLDS_ICONS_STANDARD","DIRECTIONS","LanguageDirection","IconSettingsContext","UtilityIcon","name","assistiveText","category","icon","path","direction","rest","context","inlineIcons","action","custom","doctype","standard","utility","inlineData","Object","keys","length","toLowerCase","viewBox","modifiedPath","onRequestIconPath","svgAssetName","RTL","iconPath","displayName","propTypes","object","oneOf","string","defaultProps"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\n// This component's `checkProps` which issues warnings to developers about properties\n// when in development mode (similar to React's built in development tools)\nimport checkProps from './check-props';\n\nimport Svg from './svg';\n\nimport SLDS_ICONS_UTILITY from '../../../icons/utility';\nimport SLDS_ICONS_ACTION from '../../../icons/action';\nimport SLDS_ICONS_CUSTOM from '../../../icons/custom';\nimport SLDS_ICONS_DOCTYPE from '../../../icons/doctype';\nimport SLDS_ICONS_STANDARD from '../../../icons/standard';\n\nimport { DIRECTIONS } from '../UNSAFE_direction';\nimport LanguageDirection from '../UNSAFE_direction/private/language-direction';\n\nimport { IconSettingsContext } from '../../icon-settings';\n\n/*\n * If inline icons are present and icon bundle imports are not just an empty object, then inline icons will be used instead of external icons that require HTTP access.\n */\nconst UtilityIcon = ({\n\tname = '',\n\tassistiveText, // eslint-disable-line no-unused-vars\n\tcategory,\n\ticon,\n\tpath,\n\tdirection,\n\t...rest\n}) => {\n\tconst context = useContext(IconSettingsContext);\n\tcheckProps('UtilityIcon', { name, category, path, context });\n\n\tconst inlineIcons = {\n\t\taction: SLDS_ICONS_ACTION,\n\t\tcustom: SLDS_ICONS_CUSTOM,\n\t\tdoctype: SLDS_ICONS_DOCTYPE,\n\t\tstandard: SLDS_ICONS_STANDARD,\n\t\tutility: SLDS_ICONS_UTILITY,\n\t};\n\tlet inlineData;\n\n\tif (icon) {\n\t\t// Use SVG data passed in with `icon` prop\n\t\tinlineData = icon;\n\t} else if (Object.keys(inlineIcons[category]).length) {\n\t\t// Use inline icon data if it exists. ENV variables will have to set to allow this.\n\t\tinlineData = inlineIcons[category][name.toLowerCase()];\n\t\tinlineData.viewBox = inlineIcons[category].viewBox;\n\t}\n\n\tlet modifiedPath;\n\n\tif (path) {\n\t\t// Use `path` prop of Icon if present\n\t\tmodifiedPath = path;\n\t} else if (context.onRequestIconPath) {\n\t\tmodifiedPath = context.onRequestIconPath({ category, name });\n\t} else if (context[`${category}Sprite`]) {\n\t\t// Use category sprite file from IconSettings if present\n\t\tmodifiedPath = `${context[`${category}Sprite`]}#${name}`;\n\t} else {\n\t\t// Otherwise, use external URLs for icons\n\t\tconst svgAssetName =\n\t\t\tdirection === DIRECTIONS.RTL ? 'symbols-rtl.svg' : 'symbols.svg';\n\t\tmodifiedPath =\n\t\t\tcontext.iconPath &&\n\t\t\t`${context.iconPath}/${category}-sprite/svg/${svgAssetName}#${name}`;\n\t}\n\n\treturn inlineData ? (\n\t\t<Svg data={inlineData} name={name} {...rest} />\n\t) : (\n\t\t<svg key={`${name}_${category}`} {...rest}>\n\t\t\t<use href={modifiedPath} />\n\t\t</svg>\n\t);\n};\n\nUtilityIcon.displayName = 'UtilityIcon';\n\nUtilityIcon.propTypes = {\n\tassistiveText: PropTypes.object,\n\tcategory: PropTypes.oneOf([\n\t\t'action',\n\t\t'custom',\n\t\t'doctype',\n\t\t'standard',\n\t\t'utility',\n\t]),\n\t/**\n\t * An SVG object to use instead of name / category, look in `design-system-react/icons` for examples\n\t */\n\ticon: PropTypes.object,\n\t/**\n\t * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * Path to the icon. This will override any global icon settings.\n\t */\n\tpath: PropTypes.string,\n};\n\nUtilityIcon.defaultProps = {\n\tcategory: 'utility',\n};\n\nexport default LanguageDirection(UtilityIcon);\n"],"file":"index.js"}