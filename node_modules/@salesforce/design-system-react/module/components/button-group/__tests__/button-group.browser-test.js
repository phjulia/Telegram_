function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/* eslint-disable react/no-render-return-value */

/* eslint-disable react/no-find-dom-node */
import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-dom/test-utils';
import { expect } from 'chai';
import IconSettings from '../../icon-settings';
import SLDSButtonGroup from '../../button-group';
import SLDSButton from '../../button';
describe('SLDSButtonGroup: ', function () {
  var generateButtonGroup = function generateButtonGroup(buttonGroupInstance) {
    var ref = /*#__PURE__*/React.createRef();
    TestUtils.renderIntoDocument( /*#__PURE__*/React.createElement(IconSettings, {
      iconPath: "/assets/icons"
    }, /*#__PURE__*/React.createElement("div", {
      ref: ref
    }, buttonGroupInstance)));
    return ReactDOM.findDOMNode(ref.current);
  };

  describe('component renders', function () {
    it('buttonGroup renders', function () {
      var instance = /*#__PURE__*/React.createElement(SLDSButtonGroup, null, /*#__PURE__*/React.createElement(SLDSButton, {
        label: "Chart",
        variant: "icon",
        iconCategory: "utility",
        iconName: "chart",
        iconVariant: "border"
      }), /*#__PURE__*/React.createElement(SLDSButton, {
        label: "Filter",
        variant: "icon",
        iconCategory: "utility",
        iconName: "filter",
        iconVariant: "border"
      }), /*#__PURE__*/React.createElement(SLDSButton, {
        label: "Sort",
        variant: "icon",
        iconCategory: "utility",
        iconName: "sort",
        iconVariant: "more"
      }));
      var buttonGroup = generateButtonGroup(instance);
      expect(buttonGroup).to.not.equal(undefined);
    });
    it('renders proper attributes', function () {
      var instance = /*#__PURE__*/React.createElement(SLDSButtonGroup, null, /*#__PURE__*/React.createElement(SLDSButton, {
        label: "Chart",
        variant: "icon",
        iconCategory: "utility",
        iconName: "chart",
        iconVariant: "border"
      }), /*#__PURE__*/React.createElement(SLDSButton, {
        label: "Filter",
        variant: "icon",
        iconCategory: "utility",
        iconName: "filter",
        iconVariant: "border"
      }), /*#__PURE__*/React.createElement(SLDSButton, {
        label: "Sort",
        variant: "icon",
        iconCategory: "utility",
        iconName: "sort",
        iconVariant: "more"
      }));

      var _generateButtonGroup$ = generateButtonGroup(instance).getElementsByClassName('slds-button-group'),
          _generateButtonGroup$2 = _slicedToArray(_generateButtonGroup$, 1),
          buttonGroupElement = _generateButtonGroup$2[0];

      var role = buttonGroupElement.getAttribute('role');
      expect(role).to.equal('group');
    });
    it('renders children', function () {
      var instance = /*#__PURE__*/React.createElement(SLDSButtonGroup, null, /*#__PURE__*/React.createElement(SLDSButton, {
        label: "Chart",
        variant: "icon",
        iconCategory: "utility",
        iconName: "chart",
        iconVariant: "border"
      }), /*#__PURE__*/React.createElement(SLDSButton, {
        label: "Filter",
        variant: "icon",
        iconCategory: "utility",
        iconName: "filter",
        iconVariant: "border"
      }), /*#__PURE__*/React.createElement(SLDSButton, {
        label: "Sort",
        variant: "icon",
        iconCategory: "utility",
        iconName: "sort",
        iconVariant: "more"
      }));
      var buttonGroup = generateButtonGroup(instance);
      var children = buttonGroup.getElementsByTagName('button');
      expect(children.length).to.equal(3);
    });
  });
  describe('component behavior works', function () {
    it('first button in group invokes method from props', function () {
      var onClick = sinon.spy();
      var instance = /*#__PURE__*/React.createElement(SLDSButtonGroup, null, /*#__PURE__*/React.createElement(SLDSButton, {
        label: "Refresh",
        variant: "neutral",
        onClick: onClick
      }), /*#__PURE__*/React.createElement(SLDSButton, {
        label: "Edit",
        variant: "neutral"
      }), /*#__PURE__*/React.createElement(SLDSButton, {
        label: "Save",
        variant: "neutral"
      }), /*#__PURE__*/React.createElement(SLDSButton, {
        label: "More Options",
        variant: "icon",
        iconCategory: "utility",
        iconName: "down",
        iconVariant: "border-filled"
      }));
      var buttonGroup = generateButtonGroup(instance);
      var firstBtn = buttonGroup.getElementsByTagName('button')[0];
      TestUtils.Simulate.click(firstBtn);
      expect(onClick.calledOnce).to.be.true;
    });
  });
});
//# sourceMappingURL=button-group.browser-test.js.map