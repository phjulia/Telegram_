{"version":3,"sources":["../../../.tmp-es/components/tabs/panel.jsx"],"names":["React","PropTypes","TABS_PANEL","Panel","children","Children","toArray","displayName","propTypes","label","oneOfType","string","element","isRequired","arrayOf","node","hasError","bool","assistiveText","shape","withErrorIcon"],"mappings":"AAAA;;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,UAAT,QAA2B,2BAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,sBAAkB,iCAAMJ,KAAK,CAACK,QAAN,CAAeC,OAAf,CAAuBF,QAAvB,CAAN,CAAlB;AAAA,CAAd;;AAEAD,KAAK,CAACI,WAAN,GAAoBL,UAApB;AAEAC,KAAK,CAACK,SAAN,GAAkB;AACjB;AACD;AACA;AACCC,EAAAA,KAAK,EAAER,SAAS,CAACS,SAAV,CAAoB,CAACT,SAAS,CAACU,MAAX,EAAmBV,SAAS,CAACW,OAA7B,CAApB,EAA2DC,UAJjD;;AAMjB;AACD;AACA;AACA;AACA;AACCT,EAAAA,QAAQ,EAAEH,SAAS,CAACS,SAAV,CAAoB,CAC7BT,SAAS,CAACa,OAAV,CAAkBb,SAAS,CAACc,IAA5B,CAD6B,EAE7Bd,SAAS,CAACc,IAFmB,EAG7Bd,SAAS,CAACW,OAHmB,CAApB,EAIPC,UAfc;;AAiBjB;AACD;AACA;AACCG,EAAAA,QAAQ,EAAEf,SAAS,CAACgB,IApBH;AAoBS;;AAE1B;AACD;AACA;AACA;AACA;;AACC;AACAC,EAAAA,aAAa,EAAEjB,SAAS,CAACkB,KAAV,CAAgB;AAC9BC,IAAAA,aAAa,EAAEnB,SAAS,CAACU;AADK,GAAhB;AAGf;;AA/BiB,CAAlB;AAkCA,eAAeR,KAAf","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TABS_PANEL } from '../../utilities/constants';\n\n/**\n * The `<TabsPanel />` component allows us to simplify the structure of the `<Tabs />` component.\n\n * Rather than require different (deeply nested) children for tabslist, with its tab(s) as well as tabpanel(s), we provide this `TabsPanel` component which takes a `label` property that will become what is shown on the `<Tab />` that will be associated with it.\n\n * The `children` of the Panel will be fed to the `<TabPanel />` component, while its `label` is handled in `<Tab />`, via `<TabsList />`.\n *\n * ```\n * <TabsPanel label=\"Tab 1\">\n * \t<div>\n * \t\t<h2 className=\"slds-text-heading_medium\">This is my tab 1 contents!</h2>\n * \t\t<p>They show when you click the first tab.</p>\n * \t</div>\n * </TabsPanel>\n * ```\n */\nconst Panel = ({ children }) => <div>{React.Children.toArray(children)}</div>;\n\nPanel.displayName = TABS_PANEL;\n\nPanel.propTypes = {\n\t/**\n\t * The string or element that is handed off to the `<Tab />` component, ends up being the title and the label for the tab associated with its tab panel.\n\t */\n\tlabel: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n\n\t/**\n\t * The `children` are the actual tab panels to be rendered. They get created by [tabs/index.jsx](./index.jsx) in the `renderTabPanels` function.\n\t *\n\t * Note that the `<TabsPanel />` component inserts a `div` element around the children, because React requires exactly one \"parent\" element returned. The `<TabPanel />` component simply dips down into `children` to get the children of this wrapping `div` so that it does not get rendered in the DOM.\n\t */\n\tchildren: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf(PropTypes.node),\n\t\tPropTypes.node,\n\t\tPropTypes.element,\n\t]).isRequired,\n\n\t/**\n\t * Show an icon on the `<Tab />` next to the title that can be used to communicate when a tab contains a validation error that needs attention\n\t */\n\thasError: PropTypes.bool, // deepscan-disable-line REACT_USELESS_PROP_TYPES\n\n\t/**\n\t * **Assistive text for accessibility**\n\t * This object is merged with the default props object on every render.\n\t * * `withErrorIcon`: This text is for the error icon that will be placed next to the `<Tab />` title\n\t */\n\t/* deepscan-disable REACT_USELESS_PROP_TYPES */\n\tassistiveText: PropTypes.shape({\n\t\twithErrorIcon: PropTypes.string,\n\t}),\n\t/* deepscan-enable REACT_USELESS_PROP_TYPES */\n};\n\nexport default Panel;\n"],"file":"panel.js"}